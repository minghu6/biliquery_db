#ifndef shared_hpp
#define shared_hpp
#include <unordered_map>

class Hasher
{
public:
    size_t operator() (uint32_t key) const
    {
        return key;
    }
};

typedef std::unordered_multimap<uint32_t, uint32_t, Hasher> DirectMap;


const uint8_t hexmap[] =
{
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  !"#$%&'
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ()*+,-./
 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, // 01234567
 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 89:;<=>?
 0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, // @ABCDEFG
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // HIJKLMNO
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // PQRSTUVW
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // XYZ[\]^_
 0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, // `abcdefg
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // hijklmno
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pqrstuvw
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // xyz{|}~.
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // ........
};

#endif
